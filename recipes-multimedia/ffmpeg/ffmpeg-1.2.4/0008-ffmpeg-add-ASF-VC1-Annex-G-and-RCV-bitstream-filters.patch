From c5d8aeb7e12453640ce2948158fdf6c80f45f2dd Mon Sep 17 00:00:00 2001
From: "[CST] Bas" <bas@coolstreamtech.com>
Date: Mon, 30 Sep 2013 21:05:29 +0800
Subject: [PATCH 8/9] ffmpeg: add ASF VC1 Annex-G and RCV bitstream filters.
 Originally done by Google but modified by us to convert certain VC1 in MKV
 without startcodes.

---
 libavcodec/Makefile              |   3 +
 libavcodec/allcodecs.c           |   3 +
 libavcodec/vc1_asftoannexg_bsf.c | 176 +++++++++++++++++++++++++++++++++++++++
 libavcodec/vc1_asftorcv_bsf.c    |  88 ++++++++++++++++++++
 4 files changed, 270 insertions(+)
 create mode 100644 libavcodec/vc1_asftoannexg_bsf.c
 create mode 100644 libavcodec/vc1_asftorcv_bsf.c

diff --git a/libavcodec/Makefile b/libavcodec/Makefile
index dc065a5..bd65b07 100644
--- a/libavcodec/Makefile
+++ b/libavcodec/Makefile
@@ -769,6 +769,9 @@ OBJS-$(CONFIG_MP3_HEADER_DECOMPRESS_BSF)  += mp3_header_decompress_bsf.o \
 OBJS-$(CONFIG_NOISE_BSF)                  += noise_bsf.o
 OBJS-$(CONFIG_REMOVE_EXTRADATA_BSF)       += remove_extradata_bsf.o
 OBJS-$(CONFIG_TEXT2MOVSUB_BSF)            += movsub_bsf.o
+OBJS-$(CONFIG_VC1_ASFTORCV_BSF)           += vc1_asftorcv_bsf.o
+OBJS-$(CONFIG_VC1_ASFTOANNEXG_BSF)        += vc1_asftoannexg_bsf.o vc1.o \
+                                             vc1data.o
 
 # thread libraries
 OBJS-$(HAVE_PTHREADS)                  += pthread.o frame_thread_encoder.o
diff --git a/libavcodec/allcodecs.c b/libavcodec/allcodecs.c
index 584446f..8963b39 100644
--- a/libavcodec/allcodecs.c
+++ b/libavcodec/allcodecs.c
@@ -549,4 +549,7 @@ void avcodec_register_all(void)
     REGISTER_BSF(NOISE,                 noise);
     REGISTER_BSF(REMOVE_EXTRADATA,      remove_extradata);
     REGISTER_BSF(TEXT2MOVSUB,           text2movsub);
+    REGISTER_BSF(VC1_ASFTORCV,          vc1_asftorcv);
+    REGISTER_BSF(VC1_ASFTOANNEXG,       vc1_asftoannexg);
+
 }
diff --git a/libavcodec/vc1_asftoannexg_bsf.c b/libavcodec/vc1_asftoannexg_bsf.c
new file mode 100644
index 0000000..0555ace
--- /dev/null
+++ b/libavcodec/vc1_asftoannexg_bsf.c
@@ -0,0 +1,176 @@
+/*
+ * copyright (c) 2010 Google Inc.
+ * copyright (c) 2013 CoolStream International Ltd.
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "avcodec.h"
+#include "bytestream.h"
+#include "vc1.h"
+
+// An arbitrary limit in bytes greater than the current bytes used.
+#define MAX_SEQ_HEADER_SIZE 50
+
+typedef struct ASFTOANNEXGBSFContext {
+    int frames;
+    uint8_t *seq_header;
+    int seq_header_size;
+    uint8_t *ep_header;
+    int ep_header_size;
+} ASFTOANNEXGBSFContext;
+
+static int find_codec_data(AVCodecContext *avctx, ASFTOANNEXGBSFContext *ctx, uint8_t *data, int data_size, int keyframe) {
+    const uint8_t *start = data;
+    const uint8_t *end = data + data_size;
+    const uint8_t *next;
+    int size;
+    int has_seq_header = 0;
+    int has_ep_header = 0;
+    int has_frame_header = 0;
+
+    start = find_next_marker(start, end);
+    next = start;
+    for(; next < end; start = next){
+        next = find_next_marker(start + 4, end);
+        size = next - start;
+        if(size <= 0) continue;
+        switch(AV_RB32(start)){
+        case VC1_CODE_SEQHDR:
+            has_seq_header = 1;
+            break;
+        case VC1_CODE_ENTRYPOINT:
+            has_ep_header = 1;
+            break;
+        case VC1_CODE_FRAME:
+            has_frame_header = 1;
+            break;
+        default:
+            break;
+        }
+    }
+
+    if((has_seq_header && has_ep_header && has_frame_header && keyframe) ||
+       (!has_seq_header && !has_ep_header && has_frame_header) ) return 0;
+
+    return -1;
+}
+
+static int parse_extradata(AVCodecContext *avctx, ASFTOANNEXGBSFContext *ctx, uint8_t *extradata, int extradata_size) {
+    const uint8_t *start = extradata;
+    const uint8_t *end = extradata + extradata_size;
+    const uint8_t *next;
+    int size;
+
+    start = find_next_marker(start, end);
+    next = start;
+    for(; next < end; start = next){
+        next = find_next_marker(start + 4, end);
+        size = next - start;
+        if(size <= 0) continue;
+        switch(AV_RB32(start)){
+        case VC1_CODE_SEQHDR:
+            ctx->seq_header = av_mallocz(size);
+            ctx->seq_header_size = size;
+            memcpy(ctx->seq_header, start, size);
+            break;
+        case VC1_CODE_ENTRYPOINT:
+            ctx->ep_header = av_malloc(size);
+            ctx->ep_header_size = size;
+            memcpy(ctx->ep_header, start, size);
+            break;
+        default:
+            break;
+        }
+    }
+
+    if(!ctx->seq_header || !ctx->ep_header) {
+        av_log(avctx, AV_LOG_ERROR, "Incomplete extradata\n");
+        return -1;
+    }
+    return 0;
+}
+
+static int asftoannexg_filter(AVBitStreamFilterContext *bsfc, AVCodecContext *avctx, const char *args,
+                              uint8_t **poutbuf, int *poutbuf_size,
+                              const uint8_t *buf, int buf_size, int keyframe){
+    ASFTOANNEXGBSFContext* ctx = (ASFTOANNEXGBSFContext*)bsfc->priv_data;
+
+    if (avctx->codec_id != CODEC_ID_VC1) {
+        av_log(avctx, AV_LOG_ERROR, "Only VC1 Advanced profile is accepted!\n");
+        return -1;
+    }
+
+    //if (!ctx->frames)
+    //    av_hex_dump(stdout, avctx->extradata, avctx->extradata_size);
+
+    /* Check if the main stream contains the codes already */
+    if(buf_size >= 1 && !find_codec_data(avctx, ctx, buf, buf_size, keyframe)) {
+        av_log(avctx, AV_LOG_INFO, "Nothing to do: %i\n");
+        *poutbuf = buf;
+        *poutbuf_size = buf_size;
+        return 0;
+    }
+
+    if(!avctx->extradata || avctx->extradata_size < 16) {
+        av_log(avctx, AV_LOG_INFO, "Extradata size too small: %i\n", avctx->extradata_size);
+        *poutbuf = buf;
+        *poutbuf_size = buf_size;
+        return 0;
+    }
+
+    if (!ctx->frames && parse_extradata(avctx, ctx, avctx->extradata + 1, avctx->extradata_size - 1) < 0) {
+        av_log(avctx, AV_LOG_ERROR, "Cannot parse extra data!\n");
+        return -1;
+    }
+
+    uint8_t* bs;
+    if (keyframe) {
+        // If this is the keyframe, need to put sequence header and entry point header.
+        *poutbuf_size = ctx->seq_header_size + ctx->ep_header_size + 4 + buf_size;
+        *poutbuf = av_malloc(*poutbuf_size);
+        bs = *poutbuf;
+
+        memcpy(bs, ctx->seq_header, ctx->seq_header_size);
+        bs += ctx->seq_header_size;
+        memcpy(bs, ctx->ep_header, ctx->ep_header_size);
+        bs += ctx->ep_header_size;
+    } else {
+        *poutbuf_size = 4 + buf_size;
+        *poutbuf = av_malloc(*poutbuf_size);
+        bs = *poutbuf;
+    }
+
+    // Put the frame start code and frame data.
+    bytestream_put_be32(&bs, VC1_CODE_FRAME);
+    memcpy(bs, buf, buf_size);
+    ++ctx->frames;
+    return 1;
+}
+
+static void asftoannexg_close(AVBitStreamFilterContext *bsfc) {
+    ASFTOANNEXGBSFContext *ctx = bsfc->priv_data;
+    av_freep(&ctx->seq_header);
+    av_freep(&ctx->ep_header);
+}
+
+AVBitStreamFilter ff_vc1_asftoannexg_bsf = {
+    "vc1_asftoannexg",
+    sizeof(ASFTOANNEXGBSFContext),
+    asftoannexg_filter,
+    asftoannexg_close,
+};
diff --git a/libavcodec/vc1_asftorcv_bsf.c b/libavcodec/vc1_asftorcv_bsf.c
new file mode 100644
index 0000000..2682aad
--- /dev/null
+++ b/libavcodec/vc1_asftorcv_bsf.c
@@ -0,0 +1,88 @@
+/*
+ * copyright (c) 2010 Google Inc.
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "avcodec.h"
+#include "bytestream.h"
+
+#define RCV_STREAM_HEADER_SIZE 36
+#define RCV_PICTURE_HEADER_SIZE 8
+
+typedef struct ASFTORCVBSFContext {
+    int frames;
+} ASFTORCVBSFContext;
+
+static int asftorcv_filter(AVBitStreamFilterContext *bsfc, AVCodecContext *avctx, const char *args,
+                          uint8_t **poutbuf, int *poutbuf_size,
+                          const uint8_t *buf, int buf_size, int keyframe){
+    ASFTORCVBSFContext* ctx = (ASFTORCVBSFContext*)bsfc->priv_data;
+
+    if (avctx->codec_id != CODEC_ID_WMV3) {
+        av_log(avctx, AV_LOG_ERROR, "Only WMV3 is accepted!\n");
+        return -1;
+    }
+
+    uint8_t* bs = NULL;
+    if (!ctx->frames) {
+        // Write the header if this is the first frame.
+        *poutbuf = av_malloc(RCV_STREAM_HEADER_SIZE + RCV_PICTURE_HEADER_SIZE + buf_size);
+        *poutbuf_size = RCV_STREAM_HEADER_SIZE + RCV_PICTURE_HEADER_SIZE + buf_size;
+        bs = *poutbuf;
+
+        // The following structure of stream header comes from libavformat/vc1testenc.c.
+        bytestream_put_le24(&bs, 0);  // Frame count. 0 for streaming.
+        bytestream_put_byte(&bs, 0xC5);
+        bytestream_put_le32(&bs, 4);  // 4 bytes of extra data.
+        bytestream_put_byte(&bs, avctx->extradata[0]);
+        bytestream_put_byte(&bs, avctx->extradata[1]);
+        bytestream_put_byte(&bs, avctx->extradata[2]);
+        bytestream_put_byte(&bs, avctx->extradata[3]);
+        bytestream_put_le32(&bs, avctx->height);
+        bytestream_put_le32(&bs, avctx->width);
+        bytestream_put_le32(&bs, 0xC);
+        bytestream_put_le24(&bs, 0);  // hrd_buffer
+        bytestream_put_byte(&bs, 0x80);  // level|cbr|res1
+        bytestream_put_le32(&bs, 0);  // hrd_rate
+
+        // The following LE32 describes the frame rate. Since we don't care so fill
+        // it with 0xFFFFFFFF which means variable framerate.
+        // See: libavformat/vc1testenc.c
+        bytestream_put_le32(&bs, 0xFFFFFFFF);
+    } else {
+        *poutbuf = av_malloc(RCV_PICTURE_HEADER_SIZE + buf_size);
+        *poutbuf_size = RCV_PICTURE_HEADER_SIZE + buf_size;
+        bs = *poutbuf;
+    }
+
+    // Write the picture header.
+    bytestream_put_le32(&bs, buf_size | (keyframe ? 0x80000000 : 0));
+
+    //  The following LE32 describes the pts. Since we don't care so fill it with 0.
+    bytestream_put_le32(&bs, 0);
+    memcpy(bs, buf, buf_size);
+
+    ++ctx->frames;
+    return 0;
+}
+
+AVBitStreamFilter ff_vc1_asftorcv_bsf = {
+    "vc1_asftorcv",
+    sizeof(ASFTORCVBSFContext),
+    asftorcv_filter,
+};
-- 
1.8.4.2

